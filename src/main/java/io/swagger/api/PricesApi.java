/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.64).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ErrorResponse;
import org.threeten.bp.OffsetDateTime;
import io.swagger.model.PriceResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-11-26T20:47:02.199113588Z[GMT]")
@Validated
public interface PricesApi {

    @Operation(summary = "Retrieve applicable price", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Price successfully retrieved", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PriceResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input parameters", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Price not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/prices",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PriceResponse> pricesGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Product ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "productId", required = true) Integer productId
, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Brand ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "brandId", required = true) Integer brandId
, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Application date and time in ISO-8601 format" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "applicationDate", required = true) OffsetDateTime applicationDate
);

}

